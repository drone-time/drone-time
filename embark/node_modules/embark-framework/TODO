
mocha test/ --no-timeouts

TODO:
V add embark simulator cmd
V add option to deploy all contracts
* add option to deploy specific contract
* add cmd to create an account

# Run specs

EmbarkSpec.deployAll(done);
EmbarkSpec.deployContract('ContractName', [1,2]);

EmbarkSpec.chain.reset()
EmbarkSpec.chain.mine()
EmbarkSpec.chain.mine({timestamp: 12345})

EmbarkSpec.createAccount({balance: 12345})


TODO:
* do a test to see if can get contract address in callback

https://github.com/ipfs/node-ipfs-api

* check syntax errors
* add a .done and an .error for transactions
* fingerprint option
* behaves strangely when using an undeclared stub; specifying the stub changes nothing

spec:
* not specifying () hangs
* transaction parameters not working
** use JSON.stringify
** convert json object to key=value
* need way to specify new mined block
* need way to specify accounts
* get balance

* deploying many contrats sometimes it times out, in that case it should try again
* it seems to redeploy contracts when using inheratice
* support javascript in the contract arguments
* support naming the parameters
* support $Account

* serpent compile cash.se
* serpent mk_full_signature cash.se

solc --input-file app/contracts/simple_storage.sol --combined-json binary,json-abi

console command
loads js console with contracts instantiated
repl = require "repl"

css files not trigger refresh

estimate gas
solc app/contracts/simple_storage.sol --gas

Bugs:
* adding a new contract does not trigger a redeploy
* add check for deployment
* on deploy it should check for deployment errors

Idea: for running blockchain command
* use echo command to require embark and run tests
* e.g <(require('embark-framework').mine() )


* do a test case first
* 1. create node js file
* 2. create simple function with callback
* 3. create function that uses it
* 4. make it work with promises
* 5. make it work with several promises
* 6. make it work in order
* 7. make it work synchrously 

sudo npm install -g cordova

* make binary look for yml file and check app type
* if grunt work as now
* if meteor work 'manually'
* make 'run' command deploy the stuff manually as expected
* do this inside a meteor app
** make need to do a package
* add 'watch' feature
* make a scaffold/demo feature

- contracts as arguments to other contracts
- persistent contracts - don't redeploy if they are already deployed
- stubs - addresses to already existing contracts
- data structures (contracts with structs, crud, and 'authorized owners' management
- client side deployable contracts (e.g wallets)
- contracts instances - deploy the same contract with different arguments

DeployOnlyDeclaredContracts: true
//InstanceOf: Currency
deploy: false
//Address: 0x123
DeployableOnClient: true
Stub: abi

check if all_contracts var includes files that arent defined


####################################################

env is a bit of a mess

####################################################



Embark = require('embark-framework');

embark = new Embark();
embark.config.blockchain.loadConfigFile("config/blockchain.yml")
embark.config.contracts.loadConfigFile("config/contracts.yml")
embark.deploy();


Embark.config.blockchain.loadConfigFile("config/blockchain.yml")
Embark.config.contracts.loadConfigFile("config/contracts.yml")
Embark.deploy();


Embark.blockchainConfig.loadConfigFile("config/blockchain.yml")
Embark.contractsConfig.loadConfigFile("config/contracts.yml")
Embark.deploy();
Embark.ipfs();
Embark.Tests.requestSpec();



* Singleton Contract
* Contract Available in the client side
* Multiple instances

network_id parameter doesn't seem to work
deployment is happening twice
add event for when a connection wasn't made

introduction

creating a new app

configuring an environment

deploying contracts

releasing
* ipfs
* static webserver
* client side only

tdd

