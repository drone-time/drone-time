{
  "name": "toposort",
  "version": "0.2.12",
  "description": "Topological sort of directed ascyclic graphs (like dependecy lists)",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/marcelklehr/toposort.git"
  },
  "devDependencies": {
    "vows": "0.7.x"
  },
  "keywords": [
    "topological",
    "sort",
    "sorting",
    "graphs",
    "graph",
    "dependency",
    "list",
    "dependencies",
    "acyclic"
  ],
  "author": {
    "name": "Marcel Klehr",
    "email": "mklehr@gmx.net"
  },
  "license": "MIT",
  "readme": "# Toposort\r\n\r\nSort directed acyclic graphs\r\n\r\n[![Build Status](https://travis-ci.org/marcelklehr/toposort.png)](https://travis-ci.org/marcelklehr/toposort)\r\n\r\n## Installation\r\n\r\n`npm install toposort` or `component install marcelklehr/toposort`  \r\n\r\nthen in your code:\r\n\r\n```js\r\ntoposort = require('toposort')\r\n```\r\n\r\n## Usage\r\nWe want to sort the following graph.\r\n\r\n![graph](https://raw.githubusercontent.com/marcelklehr/toposort/master/graph.jpg)\r\n\r\n```js\r\n// First, we define our edges.\r\nvar graph = [\r\n  ['put on your shoes', 'tie your shoes']\r\n, ['put on your shirt', 'put on your jacket']\r\n, ['put on your shorts', 'put on your jacket']\r\n, ['put on your shorts', 'put on your shoes']\r\n]\r\n\r\n\r\n// Now, sort the vertices topologically, to reveal a legal execution order.\r\ntoposort(graph)\r\n// [ 'put on your shirt'\r\n// , 'put on your shorts'\r\n// , 'put on your jacket'\r\n// , 'put on your shoes'\r\n// , 'tie your shoes' ]\r\n```\r\n\r\n(Note that there is no defined order for graph parts that are not connected\r\n -- you could also put on your jacket after having tied your shoes...)\r\n\r\n### Sorting dependencies\r\nIt is usually more convenient to specify *dependencies* instead of \"sequences\".\r\n```js\r\n// This time, edges represent dependencies.\r\nvar graph = [\r\n  ['tie your shoes', 'put on your shoes']\r\n, ['put on your jacket', 'put on your shirt']\r\n, ['put on your shoes', 'put on your shorts']\r\n, ['put on your jacket', 'put on your shorts']\r\n]\r\n\r\ntoposort(graph) \r\n// [ 'tie your shoes'\r\n// , 'put on your shoes'\r\n// , 'put on your jacket'\r\n// , 'put on your shirt'\r\n// , 'put on your shorts' ]\r\n\r\n// Now, reversing the list will reveal a legal execution order.\r\ntoposort(graph).reverse() \r\n// [ 'put on your shorts'\r\n// , 'put on your shirt'\r\n// , 'put on your jacket'\r\n// , 'put on your shoes'\r\n// , 'tie your shoes' ]\r\n```\r\n\r\n## API\r\n\r\n### toposort(edges)\r\n\r\n+ edges {Array} An array of directed edges describing a graph. An edge looks like this: `[node1, node2]` (vertices needn't be strings but can be of any type).\r\n\r\nReturns: {Array} a list of vertices, sorted from \"start\" to \"end\"\r\n\r\n### toposort.array(nodes, edges)\r\n\r\n+ nodes {Array} An array of nodes\r\n+ edges {Array} An array of directed edges. You don't need to mention all `nodes` here.\r\n\r\nThis is a convenience method that allows you to define nodes that may or may not be connected to any other nodes. The ordering of unconnected nodes is not defined.\r\n\r\nReturns: {Array} a list of vertices, sorted from \"start\" to \"end\"\r\n\r\n## Tests\r\n\r\nRun the tests with `node test.js`.\r\n\r\n## Legal\r\n\r\nMIT License",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/marcelklehr/toposort/issues"
  },
  "_id": "toposort@0.2.12",
  "_from": "toposort@^0.2.10"
}
