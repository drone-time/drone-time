{
  "name": "merkle-patricia-tree",
  "version": "1.1.2",
  "description": "This is an implementation of the modified merkle patricia tree as speficed in the Ethereum's yellow paper.",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha --timeout 5000 --reporter spec ./test/"
  },
  "author": {
    "name": "mjbecze",
    "email": "mjbecze@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/wanderer/merkle-patricia-tree.git"
  },
  "bugs": {
    "url": "https://github.com/wanderer/merkle-patricia-tree/issues"
  },
  "keywords": [
    "merkel",
    "radix",
    "trie",
    "ethereum"
  ],
  "license": "MPL-2.0",
  "dependencies": {
    "async": "^1.4.2",
    "browserify-sha3": "0.0.0",
    "ethereumjs-util": "^1.3.7",
    "level-ws": "0.0.0",
    "levelup": "^1.2.1",
    "memdown": "^1.0.0",
    "readable-stream": "^2.0.0",
    "rlp": "^1.0.1",
    "semaphore": ">=1.0.1"
  },
  "devDependencies": {
    "mocha": "~1.18.2",
    "ethrereum-tests": "git+https://github.com/ethereum/tests.git#develop"
  },
  "browser": {
    "sha3": "browserify-sha3"
  },
  "contributors": [
    {
      "name": "Aaron Kumavis",
      "email": "http://aaron.kumavis.me/",
      "url": "https://github.com/kumavis"
    }
  ],
  "testling": {
    "files": "test/index.js",
    "harness": "mocha-bdd",
    "browsers": [
      "chrome/22..latest",
      "firefox/16..latest",
      "safari/latest",
      "opera/11.0..latest",
      "iphone/6",
      "ipad/6",
      "android-browser/latest"
    ]
  },
  "readme": "#modified merkle patricia tree [![Build Status](https://travis-ci.org/wanderer/merkle-patricia-tree.svg?branch=master)](https://travis-ci.org/wanderer/merkle-patricia-tree)\n \nThis is an implementation of the modified merkle patricia tree as specified in the [Ethereum's yellow paper](http://gavwood.com/Paper.pdf).\n\n> The modified Merkle Patricia tree (trie) provides a persistent data structure to map between arbitrary-length binary data (byte arrays). It is defined in terms of a mutable data structure to map between 256-bit binary fragments and arbitrary-length binary data. The core of the trie, and its sole requirement in terms of the protocol specification is to provide a single 32-byte value that identifies a given set of key-value pairs.   \n  \\- Ethereum's yellow paper  \n\n## Installation\n- `npm install merkle-patricia-tree`\n\n## Usage\n```javascript\nvar Trie = require('merkle-patricia-tree'),\nlevelup = require('levelup'),\ndb = levelup('./testdb'),\ntrie = new Trie(db); \n\ntrie.put('test', 'one', function () {\n  trie.get('test', function (err, value) {\n    if(value) console.log(value.toString())\n  });\n});\n```\n\n## API\n### `new Trie([db], [root])`\n### `new Trie([root])`\nCreates a new Trie object\n- `db` -  A instance of [levelup](https://github.com/rvagg/node-levelup/) or compatiable API. If no db is `null` or left undefined then the the trie will be stored in memory via [memdown](https://github.com/rvagg/memdown)\n- `root` - A hex `String` or `Buffer` for the root of a prevously stored trie.\n\n--------------------------------------------------------\n\n### `Trie` Properties\n- `root` - The root of the `trie` as a `Buffer` \n- `isCheckpoint` -  A `Boolean` determining if you are saving to a checkpoint or directly to the db\n- `EMPTY_TRIE_ROOT`  - A `buffer` that is a the Root for an empty trie.\n\n--------------------------------------------------------\n\n### `Trie` Methods\n#### `trie.put(key, value, cb)`\nStores a give value at the give key\n- `key` - the key as a `Buffer` or `String`\n- `value` - the value to be stored\n- `cb` - a callback `Function` which is given the argumnet `err` - for an errors that may have occured\n\n--------------------------------------------------------\n\n#### `trie.get(key, cb)`\nRetrieves a value stored at a key\n- `key` - the key as a `Buffer` or `String`\n- `cb` - a callback `Function` which is given the argumnets `err` - for an errors that may have occured and `vlue` - The found value in a `Buffer` or if no value was found `null`.\n\n--------------------------------------------------------\n\n#### `trie.del(key, cb)`\nRemoves a value\n- `key` - the key as a `Buffer` or `String`\n- `cb` - a callback `Function` which is given the argumnet `err` - for an errors that may have occured\n\n--------------------------------------------------------\n\n####  `trie.checkpoint()`\nCreates a checkpoint that can later be reverted to or commited. After this is called, no changes to the trie will be permanently saved until `commit` is called. \n\n--------------------------------------------------------\n\n####  `trie.commit(cb)`\nCommits a checkpoint to the trie\n- `cb` - a callback `Function` \n\n--------------------------------------------------------\n\n####  `trie.revert()`\nrevets the trie to the state it was at when `checkpoint` was first called\n\n--------------------------------------------------------\n\n####  `trie.batch(operations)`\nGive an hash of operation adds them to the DB\n- `operations` a hash of `key`/`values` to add to the trie.\nexample  \n```javascript\nvar ops = {\n 'dog': 'dogecoin', \n 'cat': 'meow',\n 'bird': ''    //delete bird\n}\n```\n--------------------------------------------------------\n\n#### `trie.createReadStream()`\nreturns a read stream. The `data` event is given an `Object` hat has two propeties; the `key` and the `value`. Both should be Buffers.\n\n--------------------------------------------------------\n#### `trie.putRaw(key, value, cb)`\nStores a raw value in the underlining db\n- `key` - the key as a `Buffer` or `String`\n- `value` - the value to be stored\n- `cb` - a callback `Function` which is given the argumnet `err` - for an errors that may have occured\n\n--------------------------------------------------------\n\n#### `trie.getRaw(key, cb)`\nRetrieves a raw value in the underlining db\n- `key` - the key as a `Buffer` or `String`\n- `cb` - a callback `Function` which is given the argumnets `err` - for an errors that may have occured and `value` - The found value in a `Buffer` or if no value was found `null`.\n\n--------------------------------------------------------\n\n#### `trie.delRaw(key, cb)`\nRemoves a raw value in the underlining db\n- `key` - the key as a `Buffer` or `String`\n- `cb` - a callback `Function` which is given the argumnet `err` - for an errors that may have occured\n\n--------------------------------------------------------\n\n## Secure Trie Overlay\nYou can create a secure Trie where the keys are automatically hashed using sha3 by usin `require('merkle-patricia-tree/secure')`\n\n## examples\nsee [this blog post](https://wanderer.github.io/ethereum/nodejs/code/2014/05/21/using-ethereums-tries-with-node/)\n\n## Testing\n`npm test`  \nTest use mocha\n",
  "readmeFilename": "README.md",
  "_id": "merkle-patricia-tree@1.1.2",
  "_from": "merkle-patricia-tree@1.1.2"
}
