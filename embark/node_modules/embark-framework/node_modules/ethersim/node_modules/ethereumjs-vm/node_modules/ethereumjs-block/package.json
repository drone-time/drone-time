{
  "name": "ethereumjs-block",
  "version": "1.0.0",
  "description": "Provides Block serialization and help functions",
  "main": "index.js",
  "scripts": {
    "test": "standard && node ./tests/"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ethereum/ethereumjs-block.git"
  },
  "keywords": [
    "ethereum",
    "block"
  ],
  "author": {
    "name": "mjbecze",
    "url": "mb@ethdev.com"
  },
  "license": "MPL-2.0",
  "bugs": {
    "url": "https://github.com/ethereum/ethereumjs-block/issues"
  },
  "homepage": "https://github.com/ethereum/ethereumjs-block#readme",
  "dependencies": {
    "async": "^1.4.1",
    "es6-shim": "^0.33.6",
    "ethereum-common": "0.0.10",
    "ethereumjs-tx": "0.6.7",
    "ethereumjs-util": "^2.0.1",
    "merkle-patricia-tree": "^2.0.3"
  },
  "devDependencies": {
    "ethereumjs-testing": "git+https://github.com/wanderer/ethereumjs-testing.git",
    "standard": "^5.3.0",
    "tape": "^4.2.0"
  },
  "readme": "# SYNOPSIS  \n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard) [![Build Status](https://travis-ci.org/ethereum/ethereumjs-block.svg?branch=master)](https://travis-ci.org/ethereum/ethereumjs-block)\n\nImplements schema and functions related to Etheruem's block. \n\n# INSTALL\n`npm install ethereumjs-block`\n\n# BOWSER  \nThis module work with `browserify`\n# CONTACT\n [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ethereum/ethereumjs-lib?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge) or #ethereumjs on freenode\n\n# API\n- [`Block`](#block)\n    - [`new Block([data])`](#new-blockdata)\n    - [`Block` Properties](#block-properties)\n    - [`Block` Methods](#block-methods)\n        - [`block.genTxTrie(cb)`](#blockgentxtriecb) \n        - [`block.hash()`](#blockhash)\n        - [`block.serialize()`](#blockserialize)\n        - [`block.validate(blockchain, cb)`](#blockvalidateblockchain-cb)\n        - [`block.validateUncles(blockchain, cb)`](#blockvalidateunclesblockchain-cb)\n        - [`block.validateTransactions()`](#blockvalidatetransactions)\n        - [`block.validateTransactionsTrie()`](#blockvalidatetransactionstrie)\n        - [`block.isGenesis()`](#blockisgenesis)\n        - [`block.setGenesisParams()`](#blocksetgenesisparams)\n        - [`block.toJSON([label=false])`](#blocktojsonlabelfalse)\n\n- [`Blockheader`](#blockheader)\n    - [`Blockheader` Properties](#blockheader-properties)\n    - [`Blockheader` Methods](#blockheader-methods)\n        - [`blockheader.validate(blockchain, [height], cb)`](#blockheadervalidateblockchain-height-cb)\n        - [`blockheader.validateDifficulty()`](#blockheadervalidatedifficulty)\n        - [`blockheader.validateGasLimit()`](#blockheadervalidategaslimit)\n        - [`blockheader.canonicalGasLimit(parentBlock)`](#blockheadercanonicalgaslimitparentblock)\n        - [`blockheader.canonicalDifficulty(parentBlock)`](#blockheadercanonicaldifficultyparentblock)\n        - [`blockheader.hash()`](#blockheaderhash)\n\n## `Block`\n\n### `new Block([data])`\nCreates a new block object\n- `data` - the serialized block (usually from the network) in a array of buffers as described in the [wire protocol](https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-Wire-Protocol)\n\n### `Block` Properties \n- `header` - the block's [`header`](#blockheader)\n- `transactionReceipt` - an array of [`TransactionReceipt`](#transactionreceipt) in the block\n- `uncleList` - an array of uncle [`headers`](#blockheader)\n- `raw` - an array of buffers containing the raw blocks.\n\n### `Block` Methods\n\n#### `block.genTxTrie(cb)`\nGenerates the transaction trie. This must be done before doing validation\n- `cb` - the callback \n\n#### `block.hash()`\nReturns the sha3-256 hash of the RLP encoding of the serialized block\n\n#### `block.serialize()`\nReturns the RLP serialization of the block.\n\n#### `block.validate(blockchain, cb)`\nValidates the entire block. Returns a `string` to the callback if block is invalid\n- `blockchain` - an instance of the [`Blockchain`](docs/blockchain.md)\n- `cb` - the callback\n\n#### `block.validateUncles(blockchain, cb)`\nValidates the uncles that are in the block if any. Returns a `string` to the callback if uncles are invalid\n- `blockchain` - an instance of the [`Blockchain`](docs/blockchain.md)\n- `cb` - the callback\n\n#### `block.validateTransactions()`\nValidates all of the transactions in the block. Returns a `Boolean`\n\n#### `block.validateTransactionsTrie()`\nValidates the transaction trie. Returns a `Boolean`\n\n#### `block.isGenesis()`\nReturns a `Boolean` determining if the block is a genesis block\n\n#### `block.setGenesisParams()`\nSets the parameters of the block to the genesis block.\n\n#### `block.toJSON([label=false])`\nReturns the block as a JSON object.\n- `label` - A `Boolean`. If true returns an JSON object with properties corresponding to the block properties if false it just returns a JSON array.\n\n## `Blockheader`\nA object that repersents the block header.\n\n### `Blockheader` Properties\n- `parentHash` - the blocks' parnet's hash\n- `uncleHash` - sha3(rlp_encode(uncle_list))\n- `coinbase` - the miner address\n- `stateRoot` - The root of a Merkle Patricia tree\n- `transactionTrie` - the root of a Trie containing the transactions\n- `receiptTrie` - the root of a Trie containing the transaction Reciept\n- `bloom`\n- `difficulty`\n- `number` - the height\n- `gasLimit`\n- `gasUsed`\n- `timestamp`\n- `extraData`\n- `raw` - an `Array` of `Buffers` forming the raw header\n\n### `Blockheader` Methods\n\n#### `blockheader.validate(blockchain, [height], cb)`\nValidates the entire block headers\n- `blockchain` - blockChain the blockchain that this block is validating against\n- `height` if this is an uncle header, this is the height of the block that is including it\n- `cb` the callback function\n\n#### `blockheader.validateDifficulty()`\nValidates the difficutly returning a `Boolean`\n\n#### `blockheader.validateGasLimit()`\nValidates the gasLimit, returning a `Boolean`\n\n#### `blockheader.canonicalGasLimit(parentBlock)`\nReturns the canonical gas limit of the block\n- `parentBlock` - the parent`Block` of the header\n\n#### `blockheader.canonicalDifficulty(parentBlock)`\nReturns the canoncical difficulty of the block\n- `parentBlock` - the parent `Block` of the header\n\n#### `blockheader.hash()`\nReturns the sha3 hash of the blockheader\n\n# LICENSE\n[MPL-2.0](https://tldrlegal.com/license/mozilla-public-license-2.0-(mpl-2))\n",
  "readmeFilename": "README.md",
  "_id": "ethereumjs-block@1.0.0",
  "_from": "ethereumjs-block@1.0.0"
}
