{
  "name": "meteor-build-client",
  "version": "0.1.9",
  "description": "A bundles the client part of a Meteor app.",
  "author": {
    "name": "Fabian Vogelsteller",
    "email": "fabian@frozeman.de"
  },
  "contributors": [
    {
      "name": "Morten N.O. NÃ¸rgaard Henriksen",
      "email": "mh@gi2.dk"
    }
  ],
  "preferGlobal": true,
  "analyze": true,
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/frozeman/meteor-build-client"
  },
  "bugs": {
    "url": "https://github.com/frozeman/meteor-build-client/issues"
  },
  "keywords": [
    "meteor",
    "client",
    "client-only",
    "browser-only"
  ],
  "bin": {
    "meteor-build-client": "main.js"
  },
  "main": "main.js",
  "dependencies": {
    "commander": "^2.8.1",
    "simple-spinner": "0.0.3",
    "underscore": "^1.8.3"
  },
  "devDependencies": {},
  "readme": "[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/frozeman/meteor-build-client?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n*Note: The meteor package `frozeman:build-client` is only a placeholder package, don't install.*\n\n# Meteor Build Client\n\nThis tool builds and bundles the client part of a Meteor app with a simple index.html,\nso it can be hosted on any server or even loaded via the `file://` protocol.\n\n## Installation\n\n    $ [sudo] npm install -g meteor-build-client\n\n## Usage\n\n    // cd into your meteor app\n    $ cd myApp\n\n    // run meteor-build-client\n    $ meteor-build-client ../myOutputFolder\n\n### Output\n\nThe content of the output folder could look as follows:\n\n- `index.html`\n- `a28817fe16898311635fa73b959979157e830a31.css`\n- `aeca2a21c383327235a08d55994243a9f478ed57.js`\n- `...` (other files from your \"public\" folder)\n\nFor a list of options see:\n\n    $ meteor-build-client --help\n\n### Passing a settings.json\n\nYou can pass an additional settings file using the `--settings` or `-s` option:\n\n    $ meteor-build-client ../myOutputFolder -s ../settings.json\n\n**Note** Only the `public` property of that JSON file will be add to the `Meteor.settings` property.\n\n\n### App URL\n\nAdditionally you can set the `ROOT_URL` of your app using the `--url` or `-u` option:\n\n    $ meteor-build-client ../myOutputFolder -u http://myserver.com\n\nIf you pass `\"default\"`, your app will try to connect to the server where the application was served from.\n\nIf this option was not set, it will set the server to `\"\"` (empty string) and will add a `Meteor.disconnect()` after Meteor was loaded.\n\n### Absolute or relative paths\n\nIf you want to be able to start you app by simply opening the index.html (using the `file://` protocol),\nyou need to link your files relative. You can do this by setting the `--path` or `-p` option:\n\n    $ meteor-build-client ../myOutputFolder -p \"\"\n\nThe default path value is `\"/\"`.\n\n*Note* When set a path value, it will also replace this path in you Meteor CSS file, so that fonts etc link correctly.\n\n### Using custom templates\n\nIf you want to provide a custom template for the initial HTML provide an HTML file with the `--template` or `-t` option:\n\n    $ meteor-build-client ../myOutputFolder -t ../myTemplate.html\n\nThe template file need to contain the following placholders: `{{> head}}`, `{{> css}}` and `{{> scripts}}`.\nThe following example adds a simple loading text to the initial HTML file (Your app should later take care of removing the loading text):\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        {{> head}}\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"/loadingScreen.css\">\n    </head>\n    <body>\n        <h1>Loading...</h1>\n\n        {{> css}}\n        {{> scripts}}\n    </body>\n</html>\n```\nBy linking a file from your `public` folder (e.g. `loadingScreen.css`) and moving the `{{> css}}` and `{{> scripts}}` placeholder to the end of the `<body>` tag,\nyou can simply style your loading screen.\nBecause the small CSS file (`loadingScreen.css`) and the body content will be loaded *before* the Meteor app script, the the user sees the nice Loading text.\n\n## Connecting to a Meteor server\n\nIn order to connect to a Meteor servers, create DDP connection by using `DDP.connect()`, as seen in the following example:\n\n```js\n// This Should be in both server and client in a lib folder\nDDPConnection = (Meteor.isClient) ? DDP.connect(\"http://localhost:3000/\") : {};\n\n// When creating a new collection on the client use:\nif(Meteor.isClient) {\n    posts = new Mongo.Collection(\"posts\", DDPConnection);\n\n    // set the new DDP connection to all internal packages, which require one\n    Meteor.connection = DDPConnection;\n    Accounts.connection = Meteor.connection;\n    Meteor.users = new Mongo.Collection('users');\n    Meteor.connection.subscribe('users');\n\n    // And then you subscribe like this:\n    DDPConnection.subscribe(\"mySubscription\");   \n}\n```\n\n## Making routing work on a non Meteor server\n\nTo be able to open URLs and let them be handled by the client side JavaScript, you need to rewrite URLs on the server side, so they point always to your index.html.\n\nFor apache a `.htaccess` with `mod_rewrite` could look as follow:\n```bash\n<IfModule mod_rewrite.c>\n    RewriteEngine On\n    RewriteBase /\n\n    # Always pass through requests for files that exist\n    # Per http://stackoverflow.com/a/7090026/223225\n    RewriteCond %{REQUEST_FILENAME} -f [OR]\n    RewriteCond %{REQUEST_FILENAME} -d\n    RewriteRule . - [L]\n\n    # Send all other requests to index.html where the JavaScript router can take over\n    # and render the requested route\n    RewriteRule ^.*$ index.html [L]\n</IfModule>\n```\n",
  "readmeFilename": "README.md",
  "_id": "meteor-build-client@0.1.9",
  "_from": "meteor-build-client@^0.1.6"
}
