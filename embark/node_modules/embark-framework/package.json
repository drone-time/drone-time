{
  "name": "embark-framework",
  "version": "1.0.2",
  "description": "This Readme applies to Embark 1.0.0 Beta which is currently under development. For the old version please check the old [readme](https://github.com/iurimatias/embark-framework/blob/0.9.3/README.md)",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "bin": {
    "embark": "./bin/embark"
  },
  "main": "./lib/index.js",
  "directories": {
    "lib": "./lib"
  },
  "dependencies": {
    "commander": "^2.8.1",
    "grunt": "^0.4.5",
    "js-sha3": "^0.3.1",
    "meteor-build-client": "^0.1.6",
    "mkdirp": "^0.5.1",
    "read-yaml": "^1.0.0",
    "shelljs": "^0.5.0",
    "solc": "^0.1.3-2",
    "toposort": "^0.2.10",
    "web3": "^0.8.1",
    "wrench": "^1.5.8",
    "ethersim": "^0.1.1"
  },
  "author": {
    "name": "Iuri Matias",
    "email": "iuri.matias@gmail.com"
  },
  "contributors": [],
  "license": "ISC",
  "devDependencies": {
    "grunt-mocha-test": "^0.12.7",
    "mocha": "^2.2.5",
    "mocha-sinon": "^1.1.4",
    "sinon": "^1.15.4"
  },
  "readme": "This Readme applies to Embark 1.0.0 Beta which is currently under development. For the old version please check the old [readme](https://github.com/iurimatias/embark-framework/blob/0.9.3/README.md)\n\nWhat is embark\n======\n\n[![Join the chat at https://gitter.im/iurimatias/embark-framework](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/iurimatias/embark-framework?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nEmbark is a framework that allows you to easily develop and deploy DApps.\n\nWith Embark you can:\n* Automatically deploy contracts and make them available in your JS code. Embark watches for changes, and if you update a contract, Embark will automatically redeploy the contracts (if needed) and the dapp.\n* Use any build pipeline or tool you wish, including grunt and meteor.\n* Do Test Driven Development with Contracts using Javascript.\n* Easily deploy to & use decentralized systems such as IPFS.\n* Keep track of deployed contracts, deploy only when truly needed.\n* Manage different chains (e.g testnet, private net, livenet)\n* Quickly create advanced DApps using multiple contracts.\n\nSee the [Wiki](https://github.com/iurimatias/embark-framework/wiki) for more details.\n\nInstallation\n======\nRequirements: geth (1.1.3 or higher), node (0.12.2) and npm\nOptional: serpent (develop) if using contracts with Serpent\n\n```Bash\n$ npm -g install embark-framework@1.0.0-beta.1\n```\n\nSee [Complete Installation Instructions](https://github.com/iurimatias/embark-framework/wiki/Installation).\n\nUsage - Demo\n======\nYou can easily create a sample working DApp with the following:\n\n```Bash\n$ embark demo\n$ cd embark_demo\n```\n\nTo run a ethereum rpc simulator simply run:\n\n```Bash\n$ embark simulator\n```\n\nOr Alternatively, you can run a REAL ethereum node for development purposes:\n\n```Bash\n$ embark blockchain\n```\n\nBy default embark blockchain will mine a minimum amount of ether and will only mine when new transactions come in. This is quite usefull to keep a low CPU. The option can be configured at config/blockchain.yml\n\nThen, in another command line:\n\n```Bash\n$ embark run\n```\nThis will automatically deploy the contracts, update their JS bindings and deploy your DApp to a local server at http://localhost:8000\n\nNote that if you update your code it will automatically be re-deployed, contracts included. There is no need to restart embark, refreshing the page on the browser will do.\n\nnote: for a demo using meteor do ```embark meteor_demo``` followed by ```embark deploy``` then ```meteor```\n\nCreating a new DApp\n======\n\n```Bash\n$ embark new AppName\n$ cd AppName\n```\n\nDApp Structure\n======\n\n```Bash\n  app/\n    |___ contracts/ #solidity or serpent contracts\n    |___ html/\n    |___ css/\n    |___ js/\n  config/\n    |___ blockchain.yml #environments configuration\n    |___ contracts.yml  #contracts configuration\n    |___ server.yml     #server configuration\n  spec/\n    |___ contracts/ #contracts tests\n```\n\nSolidity/Serpent files in the contracts directory will automatically be deployed with embark run. Changes in any files will automatically be reflected in app, changes to contracts will result in a redeployment and update of their JS Bindings\n\nUsing Contracts\n======\nEmbark will automatically take care of deployment for you and set all needed JS bindings. For example, the contract below:\n\n```Javascript\n# app/contracts/simple_storage.sol\ncontract SimpleStorage {\n  uint public storedData;\n\n  function SimpleStorage(uint initialValue) {\n    storedData = initialValue;\n  }\n\n  function set(uint x) {\n    storedData = x;\n  }\n  function get() constant returns (uint retVal) {\n    return storedData;\n  }\n}\n```\nWill automatically be available in Javascript as:\n\n```Javascript\n# app/js/index.js\nSimpleStorage.set(100);\nSimpleStorage.get();\nSimpleStorage.storedData();\n```\n\nYou can specify for each contract and environment its gas costs and arguments:\n\n```Yaml\n# config/contracts.yml\n  development:\n    SimpleStorage:\n      gas_limit: 500000\n      gas_price: 10000000000000\n      args:\n        - 100\n  ...\n```\n\nIf you are using multiple contracts, you can pass a reference to another contract as ```$ContractName```, Embark will automatically replace this with the correct address for the contract.\n\n\n```Yaml\n# config/contracts.yml\n  development:\n    SimpleStorage:\n      args:\n        - 100\n        - $MyStorage\n    MyStorage:\n       args:\n         - \"initial string\"\n    MyMainContract:\n      args:\n        - $SimpleStorage\n  ...\n```\n\nYou can now deploy many instances of the same contract. e.g\n\n\n```Yaml\n# config/contracts.yml\n  development:\n    Currency:\n      deploy: false\n      args:\n        - 100\n    Usd:\n      instanceOf: Currency\n      args:\n        - \"initial string\"\n    MyCoin:\n      instanceOf: Currency\n      args:\n        - $SimpleStorage\n  ...\n```\n\nContracts addresses can be defined, If an address is defined the contract wouldn't be deployed but its defined address will be used instead.\n\n\n```Yaml\n  development:\n    UserStorage:\n      address: 0x123456\n    UserManagement:\n       args:\n         - $UserStorage\n  ...\n```\n\nYou can also define contract interfaces (Stubs) and actions to do on deployment\n\n```Yaml\n  development:\n    DataSource:\n      args:\n    MyDataSource:\n      args:\n      instanceOf: DataSource\n    Manager:\n      stubs:\n        - DataSource\n      args:\n        - $MyDataSource\n      onDeploy:\n        - Manager.updateStorage($MyDataSource)\n        - MyDataSource.set(5)\n  ...\n```\n\nTests\n======\n\nYou can run specs with ```embark spec```, it will run any test files under ```test/```.\n\nEmbark includes a testing lib to fastly run & test your contracts in a EVM.\n\n```Javascript\n# test/simple_storage_spec.js\nvar assert = require('assert');\nvar Embark = require('embark-framework');\nvar EmbarkSpec = Embark.initTests();\n\ndescribe(\"SimpleStorage\", function(done) {\n  before(function(done) {\n    EmbarkSpec.deployAll(done);\n  });\n\n  it(\"should set constructor value\", function(done) {\n    SimpleStorage.storedData(function(err, result) {\n      assert.equal(result.toNumber(), 100);\n      done();\n    });\n  });\n\n  it(\"set storage value\", function(done) {\n    SimpleStorage.set(150, function() {\n      SimpleStorage.get(function(err, result) {\n        assert.equal(result.toNumber(), 150);\n        done();\n      });\n    });\n  });\n\n})\n```\n\nEmbark uses [Mocha](http://mochajs.org/) by default, but you can use any testing framework you want.\n\nWorking with different chains\n======\nYou can specify which environment to deploy to:\n\n\n```$ embark blockchain staging```\n\n```$ embark run staging```\n\nThe environment is a specific blockchain configuration that can be managed at config/blockchain.yml\n\n```Yaml\n# config/blockchain.yml\n  ...\n  staging:\n    rpc_host: localhost\n    rpc_port: 8101\n    rpc_whitelist: \"*\"\n    datadir: default\n    chains: chains_staging.json\n    network_id: 0\n    console: true\n    geth_extra_opts: --vmdebug\n    account:\n      init: false\n      address: 0x123\n```\n\nSee [Configuration](https://github.com/iurimatias/embark-framework/wiki/Configuration).\n\nDeploying only contracts\n======\nAlthough embark run will automatically deploy contracts, you can choose to only deploy the contracts to a specific environment\n\n```Bash\n$ embark deploy privatenet\n```\n\nembark deploy will deploy all contracts at app/contracts and return the resulting addresses\n\nStructuring Application\n======\n\nEmbark is quite flexible and you can configure you're own directory structure using ```embark.yml```\n\n```Yaml\n# embark.yml\n  type: \"manual\" #other options: meteor, grunt\n  contracts: [\"app/contracts/**/*.sol\", \"app/contracts/**/*.se\"] # contracts files\n  output: \"src/embark.js\" # resulting javascript interface\n  blockchainConfig: \"config/blockchain.yml\" # blockchain config\n  contractsConfig: \"config/contracts.yml\" # contracts config\n```\n\nDeploying to IPFS\n======\n\nTo deploy a dapp to IPFS, all you need to do is run a local IPFS node and then run ```embark ipfs```.\nIf you want to deploy to the live net then after configuring you account on ```config/blockchain.yml``` on the ```production``` environment then you can deploy to that chain by specifying the environment ```embark ipfs production```.\n\nLiveReload Plugin\n======\n\nEmbark works quite well with the LiveReload Plugin\n\nDebugging embark\n======\nBecause embark is internally using grunt tasks, debugging is not straightforward. Example\n\n- you want to debug `embark deploy`\n- normally you would write something like `node-debug -p 7000 embark -- deploy`\n- This gives you nothing with embark. If you look at `deploy` command in [`./bin/embark`](https://github.com/iurimatias/embark-framework/blob/develop/bin/embark#L32-L35) you will notice that it internally runs grunt task `grunt deploy_contracts:[env]`\n- with this knowledge we can prepare proper command to start debugging\n- ```node-debug -p 7000 grunt -- deploy_contracts:development```\n\n\n[here](https://github.com/iurimatias/embark-framework/blob/develop/tasks/tasks.coffee) is list of all debuggable grunt tasks\n\nEACCESS Error\n======\nIf you get EACCES (access denied) errors, don't use sudo, try this:\n\n```Bash\n$ mkdir ~/npm-global\n$ npm config set prefix ~/npm-global\n$ echo 'export PATH=\"$PATH:$HOME/npm-global/bin\"' >>~/.bashrc\n$ source ~/.bashrc\n$ npm install -g embark-framework grunt-cli\n```\n",
  "readmeFilename": "README.md",
  "_id": "embark-framework@1.0.2",
  "_from": "embark-framework@^1.0.2"
}
