{
  "name": "ethereumjs-account",
  "version": "1.0.3",
  "description": "a help module for ethereum account schema",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ethereum/ethereumjs-account.git"
  },
  "scripts": {
    "test": "standard"
  },
  "keywords": [
    "ethereum",
    "account"
  ],
  "author": {
    "name": "mjbecze",
    "url": "mjbecze@gmail.com"
  },
  "license": "GPL-2.0",
  "bugs": {
    "url": "https://github.com/ethereum/ethereumjs-account/issues"
  },
  "homepage": "https://github.com/ethereum/ethereumjs-account#readme",
  "dependencies": {
    "ethereumjs-util": "2.0.1",
    "rlp": "2.0.0"
  },
  "devDependencies": {
    "standard": "^5.3.1"
  },
  "readme": "# SYNOPSIS\n\n [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard) [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ethereum/ethereumjs-lib?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge) or #ethereumjs on freenode\n\nImplements schema and functions relating to accounts stored ethereum's state Trie   \nNOTE: this is different from [ethereumjs-accounts](https://github.com/SilentCicero/ethereumjs-accounts) which should be used if you want to key management and web3 sugar.\n\n# INSTALL\n`npm install ethereumjs-account`\n\n# BROWSER\nThis module work with `browserify`\n\n# API\n - [`new Account([data])`](#new-accountdata)\n  - [`Account` Properties](#account-properties)\n  - [`Account` Methods](#account-methods)\n    - [`account.isEmpty()`](#accountisempty)\n    - [`account.isContract()`](#accountiscontract)\n    - [`account.serialize(data)`](#accountserializedata)\n    - [`account.toJSON()`](#accounttojson)\n    - [`account.getCode(trie, cb)`](#accountgetcodetrie-cb)\n    - [`account.setCode(trie, code, cb)`](#accountsetcodetrie-code-cb)\n    - [`account.getStorage(trie, key, cb)`](#accountgetstoragetrie-key-cb)\n    - [`account.setStorage(trie, key, val, cb)`](#accountsetstoragetrie-key-val-cb)\n\n### `new Account([data])`\nCreates an new account object\n- `data` - an account can be initiailized with either a `buffer` containing the RLP serialized account. \n Or an `array` of buffers relating to each of the tx Properties, listed in order below.  For example.\n```javascript\nvar raw = [ \n  '02', //nonce\n  '0384', //balance\n  '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421', //stateRoot\n  'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'  //codeHash\n  ];\n\nvar tx = new Account(raw);\n```\n\nOr lastly an `Object` containing the Properties of the transaction\n\n```javascript\nvar raw = {\n  nonce: '',\n  balance: '03e7',\n  stateRoot: '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n  codeHash: 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n};\n\nvar tx = new Account(raw);\n```\nFor `Object` and `Arrays` each of the elements can either be a `Buffer`, hex `String` , `Number`, or an object with a `toBuffer` method such as `Bignum`.\n\n### `Account` Properties\n- `nonce` - The account's nonce.\n- `balance`  - The account's balance in wie\n- `stateRoot` - the stateRoot for the storage of the contract\n- `codeHash` - the hash of the code of the contract\n\n### `Account` Methods\n\n#### `Account.isEmpty()`\nReturns a `Boolean` determining if the account is empty\n\n#### `account.isContract()`\nReturns a `Boolean` deteremining if the account is a contract\n\n#### `account.serialize()`\nReturns the RLP serialization of the account as a `Buffer`\n\n#### `acount.toJSON([object])`\nReturns the account as JSON\n- `object` - a `Boolean` that defaults to false. If `object` is true then this will return an object else it will return an `array`.\n\n#### `account.getCode(trie, cb)`\nFetches the code from the trie\n- `trie` - the [trie](github.com/wanderer/merkle-patricia-tree) to storing the accounts\n- `cb` - the callback\n\n#### `account.setCode(trie, code, cb)`\nStores the code in the trie\n- `trie` - the [trie](github.com/wanderer/merkle-patricia-tree)\n- `code` - a `Buffer`\n- `cb` - the callback\n\n#### `account.getStorage(trie, key, cb)`\nFetches `key` from the account's storage\n\n#### `account.setStorage(trie, key, val, cb)`\nStores a `val` at the `key` in the contract's storage\n",
  "readmeFilename": "README.md",
  "_id": "ethereumjs-account@1.0.3",
  "_from": "ethereumjs-account@1.0.3"
}
