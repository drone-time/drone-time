{
  "name": "json-rpc2-ethersim",
  "version": "1.0.1",
  "description": "JSON-RPC 2.0 server and client library, with HTTP, TCP and Websocket endpoints",
  "main": "./src/jsonrpc.js",
  "keywords": [
    "json",
    "rpc",
    "rpc2",
    "json-rpc",
    "json-rpc2",
    "jsonrpc",
    "jsonrpc2",
    "server",
    "client",
    "tcp",
    "websocket",
    "http"
  ],
  "author": {
    "name": "Eric Florenzano",
    "email": "floguy@gmail.com",
    "url": "eflorenzano.com"
  },
  "dependencies": {
    "jsonparse": "1.x.x",
    "debug": "2.x.x",
    "lodash": "3.x.x",
    "es5class": "2.x.x",
    "faye-websocket": "0.x.x",
    "eventemitter3": "1.x.x"
  },
  "engines": {
    "node": "0.10.x || 0.12.x"
  },
  "contributors": [
    {
      "name": "Bill Casarin",
      "email": "bill@casarin.ca",
      "url": "jb55.com"
    },
    {
      "name": "Stefan Thomas",
      "email": "justmoon@members.fsf.org",
      "url": "justmoon.net"
    },
    {
      "name": "Paulo Cesar",
      "email": "email@pocesar.e4ward.com",
      "url": "github.com/pocesar"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/pocesar/node-jsonrpc2.git"
  },
  "devDependencies": {
    "mocha": "2.x.x",
    "expect.js": "0.x.x",
    "jshint": "2.x.x",
    "istanbul": "0.x.x"
  },
  "scripts": {
    "test": "jshint examples src test && mocha test/*.js",
    "coverage": "node ./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha -- -t 5000 test/jsonrpc-test.js"
  },
  "readme": "[![Build Status](https://travis-ci.org/pocesar/node-jsonrpc2.svg?branch=master)](https://travis-ci.org/pocesar/node-jsonrpc2)\r\n\r\n[![NPM](https://nodei.co/npm/json-rpc2.svg?downloads=true)](https://nodei.co/npm/json-rpc2/)\r\n\r\n# node-jsonrpc2\r\n\r\nJSON-RPC 2.0 server and client library, with `HTTP` (with `Websocket` support) and `TCP` endpoints\r\n\r\nThis fork is a rewrite with proper testing framework, linted code, compatible with node 0.8.x and 0.10.x, class inheritance, and added functionalities\r\n\r\n## Tools\r\n\r\nCheck [jsonrpc2-tools](https://www.npmjs.org/package/jsonrpc2-tools) for some nice additions to this module.\r\n\r\n## Install\r\n\r\nTo install node-jsonrpc2 in the current directory, run:\r\n\r\n```bash\r\nnpm install json-rpc2 --save\r\n```\r\n\r\n## Changes from 0.x\r\n\r\nBefore, the `id` member was permissive and wouldn't actually adhere to the RFC, allowing anything besides `undefined`.\r\nIf your application relied on weird id constructs other than `String`, `Number` or `null`, it might break if you update to 1.x\r\n\r\n## Usage\r\n\r\nFiring up an efficient JSON-RPC server becomes extremely simple:\r\n\r\n```js\r\nvar rpc = require('json-rpc2');\r\n\r\nvar server = rpc.Server.$create({\r\n    'websocket': true, // is true by default\r\n    'headers': { // allow custom headers is empty by default\r\n        'Access-Control-Allow-Origin': '*'\r\n    }\r\n});\r\n\r\nfunction add(args, opt, callback) {\r\n  callback(null, args[0] + args[1]);\r\n}\r\n\r\nserver.expose('add', add);\r\n\r\n// you can expose an entire object as well:\r\n\r\nserver.expose('namespace', {\r\n    'function1': function(){},\r\n    'function2': function(){},\r\n    'function3': function(){}\r\n});\r\n// expects calls to be namespace.function1, namespace.function2 and namespace.function3\r\n\r\n// listen creates an HTTP server on localhost only\r\nserver.listen(8000, 'localhost');\r\n```\r\n\r\nAnd creating a client to speak to that server is easy too:\r\n\r\n```js\r\nvar rpc = require('json-rpc2');\r\n\r\nvar client = rpc.Client.$create(8000, 'localhost');\r\n\r\n// Call add function on the server\r\n\r\nclient.call('add', [1, 2], function(err, result) {\r\n    console.log('1 + 2 = ' + result);\r\n});\r\n```\r\n\r\nCreate a raw (socket) server using:\r\n\r\n```js\r\nvar rpc = require('json-rpc2');\r\n\r\nvar server = rpc.Server.$create();\r\n\r\n// non-standard auth for RPC, when using this module using both client and server, works out-of-the-box\r\nserver.enableAuth('user', 'pass');\r\n\r\n// Listen on socket\r\nserver.listenRaw(8080, 'localhost');\r\n```\r\n\r\n## Extend, overwrite, overload\r\n\r\nAny class can be extended, or used as a mixin for new classes, since it uses [ES5Class](http://github.com/pocesar/ES5-Class) module.\r\n\r\nFor example, you may extend the `Endpoint` class, that automatically extends `Client` and `Server` classes.\r\nExtending `Connection` automatically extends `SocketConnection` and `HttpServerConnection`.\r\n\r\n```js\r\nvar rpc = require('json-rpc2');\r\n\r\nrpc.Endpoint.$include({\r\n    'newFunction': function(){\r\n\r\n    }\r\n});\r\n\r\nvar\r\n    server = rpc.Server.$create(),\r\n    client = rpc.Client.$create();\r\n\r\nserver.newFunction(); // already available\r\nclient.newFunction(); // already available\r\n```\r\n\r\nTo implement a new class method (that can be called without an instance, like `rpc.Endpoint.newFunction`):\r\n\r\n```js\r\nvar rpc = require('json-rpc2');\r\n\r\nrpc.Endpoint.$implement({\r\n    'newFunction': function(){\r\n    }\r\n});\r\n\r\nrpc.Endpoint.newFunction(); // available\r\nrpc.Client.newFunction(); // every\r\nrpc.Server.newFunction(); // where\r\n```\r\n\r\nDon't forget, when you are overloading an existing function, you can call the original function using `$super`\r\n\r\n```js\r\nvar rpc = require('json-rpc2');\r\n\r\nrpc.Endpoint.$implement({\r\n    'trace': function($super, direction, message){\r\n        $super(' (' + direction + ')', message); //call the last defined function\r\n    }\r\n});\r\n```\r\n\r\nAnd you can start your classes directly from any of the classes\r\n\r\n```js\r\nvar MyCoolServer = require('json-rpc2').Server.$define('MyCoolServer', {\r\n    myOwnFunction: function(){\r\n    },\r\n}, {\r\n    myOwnClassMethod: function(){\r\n    }\r\n}); // MyCoolServer will contain all class and instance functions from Server\r\n\r\nMyCoolServer.myOwnClassMethod(); // class function\r\nMyCoolServer.$create().myOwnFunction(); // instance function\r\n```\r\n\r\n## Debugging\r\n\r\nThis module uses the [debug](http://github.com/visionmedia/debug) package, to debug it, you need to set the Node\r\nenvironment variable to jsonrpc, by setting it in command line as `set DEBUG=jsonrpc` or `export DEBUG=jsonrpc`\r\n\r\n## Examples\r\n\r\nTo learn more, see the `examples` directory, peruse `test/jsonrpc-test.js`, or\r\nsimply \"Use The Source, Luke\".\r\n\r\nMore documentation and development is on its way.\r\n\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pocesar/node-jsonrpc2/issues"
  },
  "_id": "json-rpc2-ethersim@1.0.1",
  "_from": "json-rpc2-ethersim@^1.0.1"
}
