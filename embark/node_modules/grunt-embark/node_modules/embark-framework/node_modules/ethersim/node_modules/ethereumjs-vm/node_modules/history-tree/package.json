{
  "name": "history-tree",
  "version": "2.0.0",
  "description": "Tree for tracking reverts and commits on checkpoints. Checkpoints can nest arbitrarily deep.",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "async": "^1.4.2",
    "async-eventemitter": "^0.2.2"
  },
  "devDependencies": {
    "tape": "^4.2.0"
  },
  "readme": "# history-tree\n\nTree for tracking reverts and commits on checkpoints.\nCheckpoints can nest arbitrarily deep.\n\n## api\n\n### methods\n\n##### new HistoryTree() -> history tree\n\nConstructor. Creates a history tree.\n\n##### historyTree.checkpoint() -> history sub-tree\n\nSynchronous.\nCreates a new history sub-tree and adds it to the checkpoint stack.\n\n##### historyTree.commit(cb)\n\nAsynchronous.\nRemoves the top sub-tree from the checkpoint stack,\ncalls `accept` on the sub-tree,\nthen emits `commit` on this tree.\nCalls the callback with an Error if the stack is empty.\n\n##### historyTree.revert(cb)\n\nAsynchronous.\nRemoves the top sub-tree from the checkpoint stack,\ncalls `reject` on the sub-tree,\nthen emits `revert` on this tree.\nCalls the callback with an Error if the stack is empty.\n\n##### historyTree.accept(cb)\n\nAsynchronous.\nCalls `commit` on this tree for all checkpoints on the stack, in series.\nDoes NOT call the callback with an Error if the stack is empty.\nEmits event `accepted` on this tree.\n\n##### historyTree.reject(cb)\n\nAsynchronous.\nCalls `revert` on this tree for all checkpoints on the stack, in series.\nDoes NOT call the callback with an Error if the stack is empty.\nEmits event `rejected` on this tree.\n\n### events\n\nHistoryTree is an [AsynchronousEventEmitter](https://github.com/ahultgren/async-eventemitter).\nThis means that HistoryTree's async api calls won't complete until all event listeners call their callback, unless the listener is synchronous.\nSee the AsynchronousEventEmitter api for usage.\n\n##### 'accepted' -> function(subTree, [next])\n\nCalled AFTER the `accept(cb)` on this HistoryTree node.\n\n##### 'rejected' -> function(subTree, [next])\n\nCalled AFTER the `reject(cb)` on this HistoryTree node.\n\n##### 'commit' -> function(subTree, [next])\n\nCalled AFTER every `commit(cb)` on this HistoryTree node.\n\n##### 'revert' -> function(subTree, [next])\n\nCalled AFTER every `revert(cb)` on this HistoryTree node.\n\n\n",
  "readmeFilename": "README.md",
  "_id": "history-tree@2.0.0",
  "_from": "history-tree@^2.0.0"
}
