{
  "name": "solc",
  "version": "0.1.6-2",
  "description": "Solidity compiler",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chriseth/browser-solidity.git"
  },
  "keywords": [
    "ethereum",
    "solidity",
    "compiler"
  ],
  "author": {
    "name": "chriseth"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/chriseth/browser-solidity/issues"
  },
  "homepage": "https://github.com/chriseth/browser-solidity#readme",
  "readme": "\r\n#Browser-solidity\r\n\r\nBrowser solidity is a browser based solidity compiler. To use either visit [https://chriseth.github.io/browser-solidity](https://chriseth.github.io/browser-solidity) or clone/download this repo and open `index.html` in your browser.\r\n\r\n#Nodejs usage\r\n\r\nTo use the solidity compiler via nodejs you can install it via npm\r\n\r\n\tnpm install solc\r\n\r\nAnd then use it like so:\r\n\r\n\tvar solc = require('solc');\r\n\tvar input = \"contract x { function g() {} }\";\r\n\tvar output = solc.compile(input, 1); // 1 activates the optimiser\r\n\tfor (var contractName in output.contracts)\r\n\t\tconsole.log(contractName + ': ' + output.contracts[contractName].bytecode);\r\n\r\nStarting from version 0.1.6, multiple files are supported with automatic import resolution by the compiler as follows:\r\n\r\n\tvar solc = require('solc');\r\n\tvar input = {\r\n\t\t'lib.sol': 'library L { function f() returns (uint) { return 7; } }',\r\n\t\t'cont.sol': 'import \"lib.sol\"; contract x { function g() { L.f(); } }'\r\n\t};\r\n\tvar output = solc.compile({sources: input}, 1);\r\n\tfor (var contractName in output.contracts)\r\n\t\tconsole.log(contractName + ': ' + output.contracts[contractName].bytecode);\r\n\r\nNote that all input files that are imported have to be supplied, the compiler will not load any additional files on its own.\r\n\r\n###Using a legacy version\r\n\r\nIn order to allow compiling contracts using a specific version of solidity, the `solc.useVersion` method is available. This returns a new solc object using the version provided. **Note**: version strings must match the version substring of the files availble in `/bin/soljson-*.js`. See below for an example.\r\n\r\n\tvar solc = require('solc');\r\n\t// by default the latest version is used\r\n\t// ie: solc.useVersion('latest')\r\n\r\n\t// getting a legacy version\r\n\tvar solcV011 = solc.useVersion( 'v0.1.1-2015-08-04-6ff4cd6' );\r\n\tvar output = solcV011.compile( \"contract t { function g() {} }\", 1 );\r\n",
  "readmeFilename": "README.md",
  "_id": "solc@0.1.6-2",
  "_from": "solc@^0.1.3-2"
}
